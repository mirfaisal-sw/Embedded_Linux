

PCIe resource mapping: -
============================
pcie_2: pcie@161C0000 {
        compatible = "samsung,exynos-v920-evt01-pcie-rc";
                        gpios = <&gph0 5 GPIO_ACTIVE_LOW>;      /* PERST */
                        reg = <0x0 0x161C0000 0x1000            /* elbi base */
                                0x0 0x161C1304 0x4              /* elbi base other */
                                0x0 0x161C6000 0x1000           /* gen_subsystem */
                                0x0 0x161C7000 0x1000           /* e32_phy */
                                0x0 0x16180000 0x2544           /* phy base */
                                0x0 0x14000000 0x5000           /* DBI base */
                                0x0 0x14200000 0x1000           /* DBI Shadow base */
                                0x0 0x6FFFD000 0x2000           /* configuration space */
                                0x0 0x16030000 0x1000           /* sysreg base */
                                0x0 0x16320000 0xF04            /* I/A space */
                                0x0 0x16003000 0x4              /* CMU space */
                                0x0 0x14600000 0x2000>;         /* ATU base */
                        reg-names = "elbi", "elbi_other", "gen_subsys", "e32_phy", "phy", "dbi", "dbi_shadow", "config", "sysreg", "ia", "cmu", "atu";
                        interrupts = <GIC_SPI 439 IRQ_TYPE_LEVEL_HIGH>,
                                        <GIC_SPI 410 IRQ_TYPE_LEVEL_HIGH>;
                        pinctrl-names = "default";
						
}		
			|
			|
			|_ >


static int exynos_v920_pcie_resource_mapping(struct pcie_port *pp,
                                                struct platform_device *pdev)
{
        struct dw_pcie *pci = to_dw_pcie_from_pp(pp);
        struct exynos_pcie *exynos_pcie = to_exynos_pcie(pci);
        struct resource *temp_rsc;

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "elbi");
        exynos_pcie->elbi_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->elbi_base))
                return PTR_ERR(exynos_pcie->elbi_base);

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "gen_subsys");
        exynos_pcie->gen_subsys_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->gen_subsys_base))
                return PTR_ERR(exynos_pcie->gen_subsys_base);

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "e32_phy");
        exynos_pcie->e32_phy_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->e32_phy_base))
                return PTR_ERR(exynos_pcie->e32_phy_base);

        if (exynos_pcie->soc_variant == EXYNOSAUTOV920_EVT2) {
                temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "soc_ctrl");
                exynos_pcie->soc_ctrl_base = ioremap(temp_rsc->start,
                                resource_size(temp_rsc));

                if (IS_ERR(exynos_pcie->soc_ctrl_base))
                        return PTR_ERR(exynos_pcie->soc_ctrl_base);

                temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "pmu");
                exynos_pcie->pmu_base = ioremap(temp_rsc->start,
                                resource_size(temp_rsc));

                if (IS_ERR(exynos_pcie->pmu_base))
                        return PTR_ERR(exynos_pcie->pmu_base);
        } else {
                temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "cmu");
                exynos_pcie->cmu_base = ioremap(temp_rsc->start,
                                resource_size(temp_rsc));

                if (IS_ERR(exynos_pcie->cmu_base))
                        return PTR_ERR(exynos_pcie->cmu_base);
        }

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "elbi_other");
        exynos_pcie->elbi_base_other = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->elbi_base_other))
                return PTR_ERR(exynos_pcie->elbi_base_other);
				
		temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "phy");
        exynos_pcie->phy_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->phy_base))
                return PTR_ERR(exynos_pcie->phy_base);

        if (exynos_pcie->soc_variant == EXYNOSAUTOV920_EVT2 &&
                exynos_pcie->ch_num == PCIE_CH2) {
                /* Use SRAM update only for CH2 */
                temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "sram");
                exynos_pcie->sram_base = devm_ioremap_resource(pci->dev, temp_rsc);

                if (IS_ERR(exynos_pcie->sram_base))
                        return PTR_ERR(exynos_pcie->sram_base);
        }

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "sysreg");
        exynos_pcie->sysreg_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));

        if (IS_ERR(exynos_pcie->sysreg_base))
                return PTR_ERR(exynos_pcie->sysreg_base);

        temp_rsc = platform_get_resource_byname(pdev, IORESOURCE_MEM, "dbi");
        exynos_pcie->rc_dbi_base = ioremap(temp_rsc->start,
                        resource_size(temp_rsc));
        if (IS_ERR(exynos_pcie->rc_dbi_base))
                return PTR_ERR(exynos_pcie->rc_dbi_base);

        temp_rsc = platform_get_resource_byname(pdev,
                                        IORESOURCE_MEM, "dbi_shadow");
        exynos_pcie->shadow_dbi_base =
                        devm_ioremap_resource(pci->dev, temp_rsc);
        if (IS_ERR(exynos_pcie->shadow_dbi_base))
                return PTR_ERR(exynos_pcie->shadow_dbi_base);

        if (exynos_pcie->use_ia) {
                temp_rsc = platform_get_resource_byname(pdev,
                                                IORESOURCE_MEM, "ia");
                exynos_pcie->ia_base =
                                devm_ioremap_resource(pci->dev, temp_rsc);
                if (IS_ERR(exynos_pcie->ia_base))
                        return PTR_ERR(exynos_pcie->ia_base);
        }

        return 0;
}
