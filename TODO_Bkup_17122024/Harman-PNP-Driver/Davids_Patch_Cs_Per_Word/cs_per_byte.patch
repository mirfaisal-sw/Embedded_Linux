diff --git a/drivers/harman/dynamic_spi_node/dynamic_spi_node.c b/drivers/harman/dynamic_spi_node/dynamic_spi_node.c
index 081dc3c..429ed4d 100644
--- a/drivers/harman/dynamic_spi_node/dynamic_spi_node.c
+++ b/drivers/harman/dynamic_spi_node/dynamic_spi_node.c
@@ -2,9 +2,24 @@
 #include <linux/module.h>
 #include <linux/spi/spi.h>
 
+#include <linux/platform_data/spi-omap2-mcspi.h>
+
 unsigned short mode;
 module_param(mode, ushort , 0);
-MODULE_PARM_DESC(mode, "i=2 for mercury spi node, =1 for DAB spi node, =0 for SWDL/HDR spi node");
+MODULE_PARM_DESC(mode, "=3 for PNP HDR mode, =2 for mercury spi node, =1 for DAB spi node, =0 for SWDL/HDR spi node");
+
+struct omap2_mcspi_device_config omap_controller_data = {
+	.cs_per_word = 1,
+	.turbo_mode = 0,
+};
+
+struct spi_board_info spi_device_info_pnp_hd = {
+	.max_speed_hz = 10000000, /* 10MHz */
+	.bus_num = 1,
+	.chip_select = 0,
+	.mode = SPI_MODE_1,
+	.modalias = "spidev",
+};
 
 struct spi_board_info spi_device_info_spidev = {
 	.max_speed_hz = 1500000, /* 1.5MHz */
@@ -39,11 +54,25 @@ static int spi_init(void)
 	struct spi_master *master;
 	int ret;
 	struct spi_board_info spidev_info;
-	if (mode <=2) {
-	   spidev_info = (mode == 2) ? spi_device_info_mercury:
-		(mode == 1) ? spi_device_info_dab : spi_device_info_spidev;
-
-           pr_info("bus_num:%d, mode:%d, chip_select:%d, max_speed_hz:%d =>\n",
+	if (mode <=3) {
+		switch(mode) {
+				case 3:
+					spidev_info = spi_device_info_pnp_hd;
+					break;
+				case 2:
+					spidev_info = spi_device_info_mercury;
+					break;
+				case 1:
+					spidev_info = spi_device_info_dab;
+					break;
+				case 0:
+					spidev_info = spi_device_info_spidev;
+					break;
+				default:
+					break;
+		}
+           
+		pr_info("bus_num:%d, mode:%d, chip_select:%d, max_speed_hz:%d =>\n",
                 spidev_info.bus_num, spidev_info.mode,
                 spidev_info.chip_select,
                 spidev_info.max_speed_hz);
@@ -63,6 +92,11 @@ static int spi_init(void)
 	if (!spi_device)
 		return -ENODEV;
 
+	if (mode == 3) {
+		spi_device->bits_per_word = 8;
+		spi_device->controller_data = &omap_controller_data;
+	}
+
 	ret = spi_setup(spi_device);
 	if (ret)
 		spi_unregister_device(spi_device);
